name: ci
on: [push]
jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [14.x]
        name: [macos, ubuntu, windows]
        include:
          - name: macos
            os: macos-11
            os_name: mac
            compiler: gcc
            version: "12"
            vcpkg_triplet: x64-osx-grinpp
            cmake_generator: Ninja
            cmake_platform_args: ''
            output_files: |
                backend/bin/Release/GrinNode
                backend/bin/Release/slate_tool
                backend/bin/Release/tx_verifier
                backend/bin/Release/Tests
            release_command: 'npm run clean_build:nix && npm run release'
          - name: ubuntu
            os: ubuntu-22.04
            os_name: linux
            compiler: gcc
            version: "12"
            vcpkg_triplet: x64-linux
            cmake_generator: Ninja
            cmake_platform_args: ''
            output_files: |
                backend/bin/Release/GrinNode
                backend/bin/Release/slate_tool
                backend/bin/Release/tx_verifier
                backend/bin/Release/Tests
            release_command: 'npm run clean_build:nix && npm run release'
          - name: windows
            os: windows-2019
            os_name: win
            vcpkg_triplet: x64-windows-static
            cmake_generator: 'VS16Win64'
            cmake_platform_args: ''
            output_files: |
                backend/bin/Release/Release/GrinNode.exe
                backend/bin/Release/Release/slate_tool.exe
                backend/bin/Release/Release/tx_verifier.exe
                backend/bin/Release/Release/Tests.exe
            release_command: 'npm run clean_build:win && npm run release'

    steps:
      - uses: olegtarasov/get-tag@v2
        id: tagName
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: Checkout Grin++ Backend
        uses: actions/checkout@v2
        with:
          path: backend
      - name: Checkout Grin++ UI
        uses: actions/checkout@v2
        with:
          repository: GrinPlusPlus/GrinPlusPlusUI
          path: frontend
      - name: Checkout vcpkg
        uses: actions/checkout@v2
        with:
          repository: microsoft/vcpkg
          path: vcpkg
          ref: '2020.06'
      - name: setup macos environment
        if: runner.os == 'macOS'
        run: |
          brew install gcc cmake
          echo "::set-env name=CC::gcc-${{ matrix.version }}"
          echo "::set-env name=CXX::g++-${{ matrix.version }}"
          brew install gflags
        env:
            ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      - name: setup ubuntu environment
        if: runner.os == 'Linux'
        run: |
          echo "Tag Name: ${{ steps.tagName.outputs.tag }}"
          sudo apt install uuid-dev gcc-12 g++-12 libgflags-dev build-essential
          echo "export CC=/usr/bin/gcc-12"
          echo "export CXX=/usr/bin/g++ -12"
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12
      - name: Cache vcpkg artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/vcpkg/
          key: ${{ hashFiles( '.git/HEAD' ) }}--${{ hashFiles( '**/backend/vcpkg/*' ) }}${{ runner.os }}-v2
      - name: Run vcpkg
        uses: lukka/run-vcpkg@v6
        with:
          vcpkgArguments: '--debug --overlay-ports=${{ github.workspace }}/backend/vcpkg/custom_ports --overlay-triplets=${{ github.workspace }}/backend/vcpkg/custom_triplets --triplet ${{ matrix.vcpkg_triplet }} @${{ github.workspace }}/backend/vcpkg/packages.txt'
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '6185aa76504a5025f36754324abf307cc776f3da'
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: 'Run CMake'
        uses: lukka/run-cmake@v3.3
        with:
          cmakeGenerator: ${{ matrix.cmake_generator }}
          cmakeBuildType: 'Release'
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/backend/CMakeLists.txt'
          useVcpkgToolchainFile: true
          vcpkgTriplet: '${{ matrix.vcpkg_triplet }}'
          buildDirectory: '${{ github.workspace }}/build'
          cmakeAppendedArgs: ' ${{ matrix.cmake_platform_args }} -DCMAKE_BUILD_TYPE=Release -DGRINPP_TESTS=ON'
          buildWithCMake: true
          buildWithCMakeArgs: '--config Release --parallel'
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}    
        with:
          name: GrinNode_${{ runner.os }}_${{ env.GITHUB_RUN_ID }}
          path: ${{ matrix.output_files }}
      - name: Build UI (windows)
        working-directory: frontend
        if: runner.os == 'windows' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p bin
          copy "..\backend\bin\Release\Release\GrinNode.exe" "./bin/"
          dir ${{ github.workspace }}\backend\dist\win
          xcopy "..\backend\dist\win" ".\bin\" /E /H /C /I
          dir ${{ github.workspace }}\frontend\bin
          npm version ${{ steps.tagName.outputs.tag }} --allow-same-version --git-tag-version false
          npm install && npm run build && xcopy src\electron-starter.js build\electron-starter.js* && xcopy src\notarize.js build\notarize.js*` && npm run release
      - name: Build UI (mac/linux)
        working-directory: frontend
        if: runner.os != 'windows' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
        run: |
          mkdir -p bin
          cp ../backend/bin/Release/GrinNode ./bin/
          cp -R ../backend/dist/${{ matrix.os_name }}/tor ./bin/tor
          npm version ${{ steps.tagName.outputs.tag }} --allow-same-version --git-tag-version false
          npm run clean_build:nix && npm run release
